@page "/forgetpassword"
@inject IForgetPassword irs
@inject IEmailExistChecker iec
@inject NavigationManager nm
@layout TopLayout
@using System.ComponentModel.DataAnnotations;
@using System.Net.Mail



<style>

	body {
		background-color: #e9ecef;
	}

	.box {
		height: 80vh !important;
		width: 100vw;
		display: flex;
		justify-content: center;
		flex-direction: column;
	}

	.card-primary:not(.card-outline) > .card-header {
		background-color: #343a40;
	}
</style>

<div class="container box">
	<div class="row">

		@if (!IsEmailVerifed)
		{
			<div class="col-md-4 offset-lg-4 mt-4">
				<div class="card card-primary shadow" style="max-width:30rem">
					<div class="card-header">
						<h3 class="card-title"></h3>
					</div>
					<div class="card-body ">
						<h5>Email Verification</h5>
						<EditForm Model="@me" OnValidSubmit="SendMail">
							<DataAnnotationsValidator />

							@if (!IsEmailSent)
							{
								<InputText id="email" class="form-control mb-3" placeholder="Email"
										   @bind-Value="me.UserEmail" />
								<ValidationMessage For="@(() => me.UserEmail)" />

							}

							@if (IsEmailSent)
							{
								<div class="form-group">

									<InputText id="verificationCode" class="form-control mb-3" @bind-Value="me.EnteredCode" placeholder="Enter code" />
								</div>
							}
							@if (isPasswordInput)
							{
								<div class="form-group">

									<InputText id="verificationCode" class="form-control mb-3" @bind-Value="me.Passowrd" placeholder="Enter Password" />
								</div>
							}

							<button type="submit" class="btn text-light form-control @disabledbutton" style="background-color:#343a40"> @ButtonTitle</button>

							@if (!string.IsNullOrEmpty(errorMessage))
							{
								<p class="text-danger">@errorMessage</p>
							}
						</EditForm>
					</div>
				</div>
			</div>
		}






	</div>
</div>





@code{
	private EntRegistration registration = new EntRegistration();
	protected bool IsEmailSent = false;
	protected bool IsEmailVerifed = false;
	private List<EntRegistration> entRegistration = new List<EntRegistration>();
	public string? email{ get; set; }		
	public string ButtonTitle = "Send Code";
	ModelEmail me = new ModelEmail();
	protected string disabledbutton = string.Empty;
	private string errorMessage = string.Empty;
	protected bool codeGenerated = false;
	private string EmailToInvoke = string.Empty;
	private bool isPasswordInput = false;

	class ModelEmail
	{
		public string? NewNumber { get; set; }
		public string? Passowrd { get; set; }
		[EmailAddress(ErrorMessage = "Invalid Email Address")]
		public string? UserEmail { get; set; }
		public string MessageFrom { get; } = "noreply.tourpk@gmail.com";
		public string AppPassword { get; } = "crulupbvkvdxrnmf";
		[StringLength(5, ErrorMessage = "Entered Code is Invalid")]
		public string? EnteredCode { get; set; }
	}

	private void GenerateCode()
	{
		Random rnd = new Random();
		me.NewNumber = rnd.Next(10000, 99999).ToString();
		codeGenerated = true;
	}




	public async Task SendMail()
	{
		bool emailExitsCheck = await EmailExistChecker();
		if (emailExitsCheck == true)
		{
			if (me.EnteredCode != null)
			{

				if (me.EnteredCode == me.NewNumber)
				{

					IsEmailSent = false;
					isPasswordInput = true;
					ButtonTitle = "Update";

					if (me.Passowrd!=null)
					{

						registration.EmailVerified = "true";
						registration.Email = me.UserEmail;
						registration.Password = me.Passowrd;
						await irs.PasswordForget(registration);
						await js.InvokeVoidAsync("alert", "Password Updated Sucessfully");
						nm.NavigateTo("/login");
					}
				}
				else
				{
					errorMessage = "Incorrect verification code. Please try again.";
				}
			}
			else
			{
				if (!string.IsNullOrEmpty(me.UserEmail) && !IsEmailSent)
				{
					try
					{
						GenerateCode();
						disabledbutton = "disabled";
						ButtonTitle = "Sending.......";
						MailMessage mail = new MailMessage();
						EmailToInvoke = me.UserEmail;
						mail.To.Add(me.UserEmail);
						mail.From = new MailAddress(me.MessageFrom, "TourPK");
						mail.Subject = "Verification Code";
						mail.Body = $"Your verification code is {me.NewNumber}";
						mail.IsBodyHtml = true;

						using (SmtpClient smtp = new SmtpClient
							{
								UseDefaultCredentials = false,
								EnableSsl = true,
								Host = "smtp.gmail.com",
								Port = 587,
								DeliveryMethod = SmtpDeliveryMethod.Network,
								Credentials = new System.Net.NetworkCredential(me.MessageFrom, me.AppPassword)
							})
						{
							await smtp.SendMailAsync(mail);
						}

						IsEmailSent = true;
						ButtonTitle = "Verify";

						disabledbutton = string.Empty;
					}
					catch (SmtpException ex)
					{
						errorMessage = "Please check your internet connection.";
						Console.WriteLine(ex.Message);
					}
				}
				else
				{
					errorMessage = me.UserEmail != null ? "Please Enter Verification Code" : "Please enter your email address.";
				}
			}
		}
		else
		{
			await js.InvokeVoidAsync("alert", "Email Does not Exist");

		}
	}






	public async Task<bool> EmailExistChecker()
	{
		entRegistration = await iec.GetEmailExits(me.UserEmail);
		if (entRegistration.Count > 0)
		{
			return true;
		}
		else
		{
			return false;
		}
		
	}

}