@page "/registration"
@layout Main
@inject IRegistrationService irs
@inject NavigationManager nm
@using System.ComponentModel.DataAnnotations;
@using System.Net.Mail

<PageTitle>Email</PageTitle>

<style>
	.box
	{
		height:100vh;
		display:flex;
		justify-content:center;
		align-content:center;
	}
</style>


@if (Check==false)
{

	<div class="container">
		<div class="row box ">
			<div class="col-md-6 ">
					<div class="card border-primary rounded-3">
						<div class="card-body">
							<div class="form-icon">
								<span><i class="icon icon-user"></i></span>
							</div>
							<h2 class="text-center fw-200" style="color:black">REGISTRATION</h2>
							<br>
							<div class="form-group">
								<input type="text" class="form-control form-control-lg border " id="username" placeholder="Username" @bind="registration.Name">
							</div>
							<br>
							<div class="form-group">
							<input type="password" class="form-control form-control-lg border" id="password" placeholder="Password" @bind="registration.Password">
							</div>
							<br>
							<div class="form-group">
							<input type="email" class="form-control form-control-lg border" id="email" placeholder="Email" @bind="me.UserEmail">
							</div>
							<br>

							<div class="form-group">
								<input type="text" class="form-control form-control-lg border" id="location" placeholder="Location" @bind="registration.Location">
							</div>
							<br>
							<div class="row">
								<div class="col-md-12">
									<div class="d-flex justify-content-center align-content-center">
										<div class="form-group">
											<button class="btn btn-primary fw-bold border-3" @onclick="SendMail">Create Account</button>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>

				</div>


		
			</div>
		</div>


}

@if(Check==true)
{
	
	<div class="container">
		<div class="row box">
			<div class="col-md-6">
				<div class="card border-primary">
					<div class="card-header ">
						<h3 class="justify-content-center text-center fw-bold">Verification Code</h3>
					</div>
					<div class="card-body mt-2">
						<div class=" justify-content-center align-content-center">
							<div class="form-group">
								<InputText id="verificationCode" class="form-control mb-3" @bind-Value="me.EnteredCode" placeholder="Enter code" />
								<div class="row">
									<div class="col-md-4"></div>
									
									<div class="col-md-4">
										<div class="d-flex justify-content-center align-content-center">
											<button type="submit" class="btn btn-primary form-control @disabledbutton" @onclick="EmailVerified"> @ButtonTitle</button>

										</div>
										<div class="col-md-4"></div>
									</div>
								</div>
							</div>
						</div>

					</div>
				</div>
			</div>
		</div>
	</div>

}

@code {

	protected bool IsEmailSent = false;
	protected bool IsEmailVerifed = false;
	protected string disabledbutton = string.Empty;
	protected bool codeGenerated = false;
	protected bool Check = false;
	private string errorMessage = string.Empty;
	private string EmailToInvoke = string.Empty;
	private EntRegistration registration = new EntRegistration();
	[Parameter] public string Evf { get; set; } = string.Empty;
	private string VerifiedEmailAddress = string.Empty;
	protected override async Task OnInitializedAsync()
	{
		VerifiedEmailAddress = Evf;
	}

	Random rnd = new Random();


	public async Task SaveRegistration()
	{
		registration.Email = VerifiedEmailAddress;
		registration.UserID = rnd.Next().ToString();
		await irs.RegisterUser(registration);
	}




	class ModelEmail
	{
		public string? NewNumber { get; set; }
		[EmailAddress(ErrorMessage = "Invalid Email Address")]
		public string? UserEmail { get; set; }
		public string MessageFrom { get; } = "noreply.tourpk@gmail.com";
		public string AppPassword { get; } = "crulupbvkvdxrnmf";
		[StringLength(5, ErrorMessage = "Entered Code is Invalid")]
		public string? EnteredCode { get; set; }
	}
	public string ButtonTitle = "Send Code";
	ModelEmail me = new ModelEmail();

	private void GenerateCode()
	{
		Random rnd = new Random();
		me.NewNumber = rnd.Next(10000, 99999).ToString();
		codeGenerated = true;
	}

	public async Task SendMail()
	{
		if (me.EnteredCode != null)
		{

			if (me.EnteredCode == me.NewNumber)
			{
				IsEmailVerifed = true;
			}
			else
			{
				errorMessage = "Incorrect verification code. Please try again.";
			}
		}
		else
		{
			if (!string.IsNullOrEmpty(me.UserEmail) && !IsEmailSent)
			{
				try
				{
					GenerateCode();
					disabledbutton = "disabled";
					ButtonTitle = "Sending.......";
					MailMessage mail = new MailMessage();
					EmailToInvoke = me.UserEmail;
					mail.To.Add(me.UserEmail);
					mail.From = new MailAddress(me.MessageFrom, "TourPK");
					mail.Subject = "Verification Code";
					mail.Body = $"Your verification code is {me.NewNumber}";
					mail.IsBodyHtml = true;

					using (SmtpClient smtp = new SmtpClient
						{
							UseDefaultCredentials = false,
							EnableSsl = true,
							Host = "smtp.gmail.com",
							Port = 587,
							DeliveryMethod = SmtpDeliveryMethod.Network,
							Credentials = new System.Net.NetworkCredential(me.MessageFrom, me.AppPassword)
						})
					{
						await smtp.SendMailAsync(mail);
						registration.Email = me.UserEmail;
						registration.UserID = rnd.Next().ToString();
						await irs.RegisterUser(registration);
						Check = true;
					}

					IsEmailSent = true;
					Check = true;
					ButtonTitle = "Verify";
					disabledbutton = string.Empty;
				}
				catch (SmtpException ex)
				{
					errorMessage = "Please check your internet connection.";
					Console.WriteLine(ex.Message);
				}
			}
			else
			{
				errorMessage = me.UserEmail != null ? "Please Enter Verification Code" : "Please enter your email address.";
			}
		}
	}


	public void EmailVerified()
	{
		if (me.EnteredCode != null)
		{

			if (me.EnteredCode == me.NewNumber)
			{
				IsEmailVerifed = true;
				nm.NavigateTo("/");
			}
			else
			{
				errorMessage = "Incorrect verification code. Please try again.";
			}
		}


	}



}